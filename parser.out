Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> VAR
Rule 2     expr -> func arg
Rule 3     expr -> HASH VAR DOT expr
Rule 4     func -> VAR
Rule 5     func -> LPAREN HASH VAR DOT expr RPAREN
Rule 6     func -> func arg
Rule 7     arg -> VAR
Rule 8     arg -> LPAREN HASH VAR DOT expr RPAREN
Rule 9     arg -> LPAREN func arg RPAREN

Terminals, with rules where they appear

DOT                  : 3 5 8
HASH                 : 3 5 8
LPAREN               : 5 8 9
RPAREN               : 5 8 9
VAR                  : 1 3 4 5 7 8
error                : 

Nonterminals, with rules where they appear

arg                  : 2 6 9
expr                 : 3 5 8 0
func                 : 2 6 9

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . HASH VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN HASH VAR DOT expr RPAREN
    (6) func -> . func arg

    VAR             shift and go to state 2
    HASH            shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 1
    func                           shift and go to state 3

state 1

    (0) S' -> expr .



state 2

    (1) expr -> VAR .
    (4) func -> VAR .

    $end            reduce using rule 1 (expr -> VAR .)
    RPAREN          reduce using rule 1 (expr -> VAR .)
    VAR             reduce using rule 4 (func -> VAR .)
    LPAREN          reduce using rule 4 (func -> VAR .)


state 3

    (2) expr -> func . arg
    (6) func -> func . arg
    (7) arg -> . VAR
    (8) arg -> . LPAREN HASH VAR DOT expr RPAREN
    (9) arg -> . LPAREN func arg RPAREN

    VAR             shift and go to state 7
    LPAREN          shift and go to state 8

    arg                            shift and go to state 6

state 4

    (3) expr -> HASH . VAR DOT expr

    VAR             shift and go to state 9


state 5

    (5) func -> LPAREN . HASH VAR DOT expr RPAREN

    HASH            shift and go to state 10


state 6

    (2) expr -> func arg .
    (6) func -> func arg .

    $end            reduce using rule 2 (expr -> func arg .)
    RPAREN          reduce using rule 2 (expr -> func arg .)
    VAR             reduce using rule 6 (func -> func arg .)
    LPAREN          reduce using rule 6 (func -> func arg .)


state 7

    (7) arg -> VAR .

    $end            reduce using rule 7 (arg -> VAR .)
    VAR             reduce using rule 7 (arg -> VAR .)
    LPAREN          reduce using rule 7 (arg -> VAR .)
    RPAREN          reduce using rule 7 (arg -> VAR .)


state 8

    (8) arg -> LPAREN . HASH VAR DOT expr RPAREN
    (9) arg -> LPAREN . func arg RPAREN
    (4) func -> . VAR
    (5) func -> . LPAREN HASH VAR DOT expr RPAREN
    (6) func -> . func arg

    HASH            shift and go to state 11
    VAR             shift and go to state 12
    LPAREN          shift and go to state 5

    func                           shift and go to state 13

state 9

    (3) expr -> HASH VAR . DOT expr

    DOT             shift and go to state 14


state 10

    (5) func -> LPAREN HASH . VAR DOT expr RPAREN

    VAR             shift and go to state 15


state 11

    (8) arg -> LPAREN HASH . VAR DOT expr RPAREN

    VAR             shift and go to state 16


state 12

    (4) func -> VAR .

    VAR             reduce using rule 4 (func -> VAR .)
    LPAREN          reduce using rule 4 (func -> VAR .)


state 13

    (9) arg -> LPAREN func . arg RPAREN
    (6) func -> func . arg
    (7) arg -> . VAR
    (8) arg -> . LPAREN HASH VAR DOT expr RPAREN
    (9) arg -> . LPAREN func arg RPAREN

    VAR             shift and go to state 7
    LPAREN          shift and go to state 8

    arg                            shift and go to state 17

state 14

    (3) expr -> HASH VAR DOT . expr
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . HASH VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN HASH VAR DOT expr RPAREN
    (6) func -> . func arg

    VAR             shift and go to state 2
    HASH            shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 18
    func                           shift and go to state 3

state 15

    (5) func -> LPAREN HASH VAR . DOT expr RPAREN

    DOT             shift and go to state 19


state 16

    (8) arg -> LPAREN HASH VAR . DOT expr RPAREN

    DOT             shift and go to state 20


state 17

    (9) arg -> LPAREN func arg . RPAREN
    (6) func -> func arg .

    RPAREN          shift and go to state 21
    VAR             reduce using rule 6 (func -> func arg .)
    LPAREN          reduce using rule 6 (func -> func arg .)


state 18

    (3) expr -> HASH VAR DOT expr .

    $end            reduce using rule 3 (expr -> HASH VAR DOT expr .)
    RPAREN          reduce using rule 3 (expr -> HASH VAR DOT expr .)


state 19

    (5) func -> LPAREN HASH VAR DOT . expr RPAREN
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . HASH VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN HASH VAR DOT expr RPAREN
    (6) func -> . func arg

    VAR             shift and go to state 2
    HASH            shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 22
    func                           shift and go to state 3

state 20

    (8) arg -> LPAREN HASH VAR DOT . expr RPAREN
    (1) expr -> . VAR
    (2) expr -> . func arg
    (3) expr -> . HASH VAR DOT expr
    (4) func -> . VAR
    (5) func -> . LPAREN HASH VAR DOT expr RPAREN
    (6) func -> . func arg

    VAR             shift and go to state 2
    HASH            shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 23
    func                           shift and go to state 3

state 21

    (9) arg -> LPAREN func arg RPAREN .

    $end            reduce using rule 9 (arg -> LPAREN func arg RPAREN .)
    VAR             reduce using rule 9 (arg -> LPAREN func arg RPAREN .)
    LPAREN          reduce using rule 9 (arg -> LPAREN func arg RPAREN .)
    RPAREN          reduce using rule 9 (arg -> LPAREN func arg RPAREN .)


state 22

    (5) func -> LPAREN HASH VAR DOT expr . RPAREN

    RPAREN          shift and go to state 24


state 23

    (8) arg -> LPAREN HASH VAR DOT expr . RPAREN

    RPAREN          shift and go to state 25


state 24

    (5) func -> LPAREN HASH VAR DOT expr RPAREN .

    VAR             reduce using rule 5 (func -> LPAREN HASH VAR DOT expr RPAREN .)
    LPAREN          reduce using rule 5 (func -> LPAREN HASH VAR DOT expr RPAREN .)


state 25

    (8) arg -> LPAREN HASH VAR DOT expr RPAREN .

    $end            reduce using rule 8 (arg -> LPAREN HASH VAR DOT expr RPAREN .)
    VAR             reduce using rule 8 (arg -> LPAREN HASH VAR DOT expr RPAREN .)
    LPAREN          reduce using rule 8 (arg -> LPAREN HASH VAR DOT expr RPAREN .)
    RPAREN          reduce using rule 8 (arg -> LPAREN HASH VAR DOT expr RPAREN .)

